<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/ETWKLandingPagePresenter.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/ETWKLandingPagePresenter</TokenIdentifier>
			<Abstract type="html">This is a helper class that shows webpages. These come down in several forms - sometimes a CloudPage, sometimes something from OpenDirect - and this guy shows them. It&apos;s a pretty simple class that pops up a view with a toolbar, shows a webpage, and waits to be dismissed.</Abstract>
			<DeclaredIn>ETWKLandingPagePresenter.h</DeclaredIn>
            
			
			<NodeRef refid="8"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETWKLandingPagePresenter/setLandingPagePath:</TokenIdentifier>
			<Abstract type="html">Don&apos;t let the name fool you - this can be any URL, not just a landing page. It will eventually be converted to an NSURL and displayed.</Abstract>
			<DeclaredIn>ETWKLandingPagePresenter.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSString *landingPagePath</Declaration>
			
			
			<Anchor>//api/name/landingPagePath</Anchor>
            <NodeRef refid="8"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETWKLandingPagePresenter/landingPagePath</TokenIdentifier>
			<Abstract type="html">Don&apos;t let the name fool you - this can be any URL, not just a landing page. It will eventually be converted to an NSURL and displayed.</Abstract>
			<DeclaredIn>ETWKLandingPagePresenter.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSString *landingPagePath</Declaration>
			
			
			<Anchor>//api/name/landingPagePath</Anchor>
            <NodeRef refid="8"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETWKLandingPagePresenter/landingPagePath</TokenIdentifier>
			<Abstract type="html">Don&apos;t let the name fool you - this can be any URL, not just a landing page. It will eventually be converted to an NSURL and displayed.</Abstract>
			<DeclaredIn>ETWKLandingPagePresenter.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSString *landingPagePath</Declaration>
			
			
			<Anchor>//api/name/landingPagePath</Anchor>
            <NodeRef refid="8"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETWKLandingPagePresenter/initForLandingPageAt:</TokenIdentifier>
			<Abstract type="html">A helper designated initializer that takes the landing page as a string.</Abstract>
			<DeclaredIn>ETWKLandingPagePresenter.h</DeclaredIn>
			
			<Declaration>- (id)initForLandingPageAt:(NSString *)landingPage</Declaration>
			<Parameters>
				<Parameter>
					<Name>landingPage</Name>
					<Abstract type="html">An NSString value</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Returns a id value</Abstract></ReturnValue>
			<Anchor>//api/name/initForLandingPageAt:</Anchor>
            <NodeRef refid="8"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETWKLandingPagePresenter/initForLandingPageAtWithURL:</TokenIdentifier>
			<Abstract type="html">Another helper that takes it in NSURL form. We&apos;re not picky. It&apos;d be cool of ObjC did method overloading, though.</Abstract>
			<DeclaredIn>ETWKLandingPagePresenter.h</DeclaredIn>
			
			<Declaration>- (id)initForLandingPageAtWithURL:(NSURL *)landingPage</Declaration>
			<Parameters>
				<Parameter>
					<Name>landingPage</Name>
					<Abstract type="html">An NSURL value</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Returns a id value</Abstract></ReturnValue>
			<Anchor>//api/name/initForLandingPageAtWithURL:</Anchor>
            <NodeRef refid="8"/>
		</Token>
		
        
        
	</File>
</Tokens>