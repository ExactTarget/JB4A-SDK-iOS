<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/ETPush.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/ETPush</TokenIdentifier>
			<Abstract type="html">This is the main interface to the Salesforce MobilePush SDK. It is meant to handle a lot of the heavy lifting with regards to sending data back to Salesforce.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
            
			
			<NodeRef refid="6"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ETPush/pushManager</TokenIdentifier>
			<Abstract type="html">Returns (or initializes) the shared pushManager instance.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>+ (ETPush *)pushManager</Declaration>
			
			<ReturnValue><Abstract type="html">The singleton instance of an ETPush pushManager.</Abstract></ReturnValue>
			<Anchor>//api/name/pushManager</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/configureSDKWithAppID:andAccessToken:withAnalytics:andLocationServices:andCloudPages:</TokenIdentifier>
			<Abstract type="html">This is the main configuration method, responsible for setting credentials needed to communicate with Salesforce. If you are unsure of your accessToken or environment, please visit Code@ExactTarget (&lt;b class=&quot;deprecated&quot;&gt;Deprecated:&lt;/b&gt;&lt;span class=&quot;deprecated&quot;&gt; Jan 27 2016&lt;/span&gt;)</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (void)configureSDKWithAppID:(NSString *)etAppID andAccessToken:(NSString *)accessToken withAnalytics:(BOOL)analyticsState andLocationServices:(BOOL)locState andCloudPages:(BOOL)cpState</Declaration>
			<Parameters>
				<Parameter>
					<Name>etAppID</Name>
					<Abstract type="html">The App ID generated by Code@ExactTarget to identify the consumer app</Abstract>
				</Parameter><Parameter>
					<Name>accessToken</Name>
					<Abstract type="html">The designed token given to you by Code@ExactTarget that allows you access to the API</Abstract>
				</Parameter><Parameter>
					<Name>analyticsState</Name>
					<Abstract type="html">Whether or not to send analytic data back to Salesforce</Abstract>
				</Parameter><Parameter>
					<Name>locState</Name>
					<Abstract type="html">Whether or not to use Location Services</Abstract>
				</Parameter><Parameter>
					<Name>cpState</Name>
					<Abstract type="html">Whether or not to use Cloud Pages</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Doesn&apos;t return a value</Abstract></ReturnValue>
			<Anchor>//api/name/configureSDKWithAppID:andAccessToken:withAnalytics:andLocationServices:andCloudPages:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/configureSDKWithAppID:andAccessToken:withAnalytics:andLocationServices:andCloudPages:withPIAnalytics:error:</TokenIdentifier>
			<Abstract type="html">Use this for JB4ASDK 4.0.0 and above
This is the main configuration method, responsible for setting credentials needed to communicate with Salesforce. If you are unsure of your accessToken or environment, please visit Code@ExactTarget (&lt;b class=&quot;deprecated&quot;&gt;Deprecated:&lt;/b&gt;&lt;span class=&quot;deprecated&quot;&gt; Jan 26 2016&lt;/span&gt;)</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (BOOL)configureSDKWithAppID:(NSString *)etAppID andAccessToken:(NSString *)accessToken withAnalytics:(BOOL)analyticsState andLocationServices:(BOOL)locState andCloudPages:(BOOL)cpState withPIAnalytics:(BOOL)pIAnalyticsState error:(NSError **)configureError</Declaration>
			<Parameters>
				<Parameter>
					<Name>etAppID</Name>
					<Abstract type="html">The App ID generated by Code@ExactTarget to identify the consumer app</Abstract>
				</Parameter><Parameter>
					<Name>accessToken</Name>
					<Abstract type="html">The designed token given to you by Code@ExactTarget that allows you access to the API</Abstract>
				</Parameter><Parameter>
					<Name>analyticsState</Name>
					<Abstract type="html">Whether or not to send analytic data back to Salesforce</Abstract>
				</Parameter><Parameter>
					<Name>locState</Name>
					<Abstract type="html">Whether or not to use Location Services</Abstract>
				</Parameter><Parameter>
					<Name>cpState</Name>
					<Abstract type="html">Whether or not to use Cloud Pages</Abstract>
				</Parameter><Parameter>
					<Name>pIAnalyticsState</Name>
					<Abstract type="html">Whether or not to send Web and Mobile analytic data back to Salesforce</Abstract>
				</Parameter><Parameter>
					<Name>configureError</Name>
					<Abstract type="html">NSError object describing the error</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Returns YES if successful or NO if failed. Do not proceed if NO is returned</Abstract></ReturnValue>
			<Anchor>//api/name/configureSDKWithAppID:andAccessToken:withAnalytics:andLocationServices:andCloudPages:withPIAnalytics:error:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/configureSDKWithAppID:andAccessToken:withAnalytics:andLocationServices:andProximityServices:andCloudPages:withPIAnalytics:error:</TokenIdentifier>
			<Abstract type="html">Use this for JB4ASDK 4.0.0 and above
This is the main configuration method, responsible for setting credentials needed to communicate with Salesforce. If you are unsure of your accessToken or environment, please visit Code@ExactTarget</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (BOOL)configureSDKWithAppID:(NSString *)etAppID andAccessToken:(NSString *)accessToken withAnalytics:(BOOL)analyticsState andLocationServices:(BOOL)locState andProximityServices:(BOOL)proximityState andCloudPages:(BOOL)cpState withPIAnalytics:(BOOL)pIAnalyticsState error:(NSError **)configureError</Declaration>
			<Parameters>
				<Parameter>
					<Name>etAppID</Name>
					<Abstract type="html">The App ID generated by Code@ExactTarget to identify the consumer app</Abstract>
				</Parameter><Parameter>
					<Name>accessToken</Name>
					<Abstract type="html">The designed token given to you by Code@ExactTarget that allows you access to the API</Abstract>
				</Parameter><Parameter>
					<Name>analyticsState</Name>
					<Abstract type="html">Whether or not to send analytic data back to Salesforce</Abstract>
				</Parameter><Parameter>
					<Name>locState</Name>
					<Abstract type="html">Whether or not to use Location Services</Abstract>
				</Parameter><Parameter>
					<Name>proximityState</Name>
					<Abstract type="html">Whether or not to use Proximity Services. Using proximity services requires setting locState to YES</Abstract>
				</Parameter><Parameter>
					<Name>cpState</Name>
					<Abstract type="html">Whether or not to use Cloud Pages</Abstract>
				</Parameter><Parameter>
					<Name>pIAnalyticsState</Name>
					<Abstract type="html">Whether or not to send Web and Mobile analytic data back to Salesforce</Abstract>
				</Parameter><Parameter>
					<Name>configureError</Name>
					<Abstract type="html">NSError object describing the error</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Returns YES if successful or NO if failed. Do not proceed if NO is returned</Abstract></ReturnValue>
			<Anchor>//api/name/configureSDKWithAppID:andAccessToken:withAnalytics:andLocationServices:andProximityServices:andCloudPages:withPIAnalytics:error:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/setOpenDirectDelegate:</TokenIdentifier>
			<Abstract type="html">Sets the OpenDirect delegate.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (void)setOpenDirectDelegate:(id&lt;ExactTargetOpenDirectDelegate&gt;)delegate</Declaration>
			<Parameters>
				<Parameter>
					<Name>delegate</Name>
					<Abstract type="html">The object you wish to be called when an OpenDirect message is delivered.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Doesn&apos;t return a value.</Abstract></ReturnValue>
			<Anchor>//api/name/setOpenDirectDelegate:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/openDirectDelegate</TokenIdentifier>
			<Abstract type="html">Returns the OpenDirect delegate.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (id&lt;ExactTargetOpenDirectDelegate&gt;)openDirectDelegate</Declaration>
			
			<ReturnValue><Abstract type="html">delegate The named OpenDirect delegate, or nil if there isn&apos;t one.</Abstract></ReturnValue>
			<Anchor>//api/name/openDirectDelegate</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/updateET</TokenIdentifier>
			<Abstract type="html">Triggers an immediate send of Registration data to Salesforce Marketing Cloud and will wait 60 seconds to send
for all calls made after the first call was made while the app is in foreground.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (void)updateET</Declaration>
			
			
			<Anchor>//api/name/updateET</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/registerForRemoteNotifications</TokenIdentifier>
			<Abstract type="html">Wrapper for iOS&apos; application:registerForRemoteNotification; call. It will check that push is allowed, and if so, register with Apple for a token. If push is not enabled, it will notify Salesforce that push is disabled.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (void)registerForRemoteNotifications</Declaration>
			
			<ReturnValue><Abstract type="html">Doesn&apos;t return a value</Abstract></ReturnValue>
			<Anchor>//api/name/registerForRemoteNotifications</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/isRegisteredForRemoteNotifications</TokenIdentifier>
			<Abstract type="html">Wrapper for iOS&apos; isRegisteredForRemoteNotifications; call.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (BOOL)isRegisteredForRemoteNotifications</Declaration>
			
			<ReturnValue><Abstract type="html">BOOL</Abstract></ReturnValue>
			<Anchor>//api/name/isRegisteredForRemoteNotifications</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/registerUserNotificationSettings:</TokenIdentifier>
			<Abstract type="html">Wrapper for iOS&apos; application:registerUserNotificationSettings; call.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (void)registerUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings</Declaration>
			<Parameters>
				<Parameter>
					<Name>notificationSettings</Name>
					<Abstract type="html">The UIUserNotificationSettings object that the application would like to use for push. These are pipe-delimited, and use Apple&apos;s native values</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Doesn&apos;t return a value</Abstract></ReturnValue>
			<Anchor>//api/name/registerUserNotificationSettings:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/currentUserNotificationSettings</TokenIdentifier>
			<Abstract type="html">Wrapper for iOS&apos; currentUserNotificationSettings; call.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (UIUserNotificationSettings *)currentUserNotificationSettings</Declaration>
			
			<ReturnValue><Abstract type="html">Doesn&apos;t return a value</Abstract></ReturnValue>
			<Anchor>//api/name/currentUserNotificationSettings</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/didRegisterUserNotificationSettings:</TokenIdentifier>
			<Abstract type="html">Wrapper for iOS&apos; didRegisterUserNotificationSettings; callback.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (void)didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings</Declaration>
			<Parameters>
				<Parameter>
					<Name>notificationSettings</Name>
					<Abstract type="html">a UIUserNotificationSettings class value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">no value returned.</Abstract></ReturnValue>
			<Anchor>//api/name/didRegisterUserNotificationSettings:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/registerForRemoteNotificationTypes:</TokenIdentifier>
			<Abstract type="html">Wrapper for iOS&apos; application:registerForRemoteNotificationTypes; call. It will check that push is allowed, and if so, register with Apple for a token. If push is not enabled, it will notify Salesforce that push is disabled. (&lt;b class=&quot;deprecated&quot;&gt;Deprecated:&lt;/b&gt;&lt;span class=&quot;deprecated&quot;&gt; June 4 2015&lt;/span&gt;)</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (void)registerForRemoteNotificationTypes:(UIRemoteNotificationType)types</Declaration>
			<Parameters>
				<Parameter>
					<Name>types</Name>
					<Abstract type="html">The UIRemoteNotificationTypes that the application would like to use for push. These are pipe-delimited, and use Apple&apos;s native values</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Doesn&apos;t return a value</Abstract></ReturnValue>
			<Anchor>//api/name/registerForRemoteNotificationTypes:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/registerDeviceToken:</TokenIdentifier>
			<Abstract type="html">Responsible for sending a received token back to Salesforce. It marks the end of the token registration flow. If it is unable to reach ET server, it will save the token and try again later.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (void)registerDeviceToken:(NSData *)deviceToken</Declaration>
			<Parameters>
				<Parameter>
					<Name>deviceToken</Name>
					<Abstract type="html">Token as received from Apple, still an NSData object</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Doesn&apos;t return a value</Abstract></ReturnValue>
			<Anchor>//api/name/registerDeviceToken:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/deviceToken</TokenIdentifier>
			<Abstract type="html">Returns the device token as a NSString. As requested via GitHub (Issue #3).</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (NSString *)deviceToken</Declaration>
			
			<ReturnValue><Abstract type="html">A stringified version of the Device Token</Abstract></ReturnValue>
			<Anchor>//api/name/deviceToken</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/applicationDidFailToRegisterForRemoteNotificationsWithError:</TokenIdentifier>
			<Abstract type="html">Handles a registration failure.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (void)applicationDidFailToRegisterForRemoteNotificationsWithError:(NSError *)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>error</Name>
					<Abstract type="html">The error returned to the application on a registration failure</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Doesn&apos;t return a value</Abstract></ReturnValue>
			<Anchor>//api/name/applicationDidFailToRegisterForRemoteNotificationsWithError:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/resetBadgeCount</TokenIdentifier>
			<Abstract type="html">Reset the application&apos;s badge number to zero (aka, remove it) and let the push servers know that it should zero the count.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (void)resetBadgeCount</Declaration>
			
			<ReturnValue><Abstract type="html">Doesn&apos;t return a value</Abstract></ReturnValue>
			<Anchor>//api/name/resetBadgeCount</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/shouldDisplayAlertViewIfPushReceived:</TokenIdentifier>
			<Abstract type="html">Tell the SDK to display a UIAlertView if a push is received while the app is already running. Default behavior is set to NO.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (void)shouldDisplayAlertViewIfPushReceived:(BOOL)desiredState</Declaration>
			<Parameters>
				<Parameter>
					<Name>desiredState</Name>
					<Abstract type="html">YES/NO if you want to display an alert view while the app is running.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Doesn&apos;t return a value</Abstract></ReturnValue>
			<Anchor>//api/name/shouldDisplayAlertViewIfPushReceived:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/applicationLaunchedWithOptions:</TokenIdentifier>
			<Abstract type="html">Notifies the ET SDK of an app launch, including the dictionary sent to the app by iOS. The launchOptions dictionary is necessary because it will include the APNS dictionary, necessary for processing opens and other analytic information.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (void)applicationLaunchedWithOptions:(NSDictionary *)launchOptions</Declaration>
			<Parameters>
				<Parameter>
					<Name>launchOptions</Name>
					<Abstract type="html">The dictionary passed to the application by iOS on launch.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Doesn&apos;t return a value</Abstract></ReturnValue>
			<Anchor>//api/name/applicationLaunchedWithOptions:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/applicationTerminated</TokenIdentifier>
			<Abstract type="html">Notifies the ET SDK of an app termination. Internally, this method does a lot of cleanup.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (void)applicationTerminated</Declaration>
			
			<ReturnValue><Abstract type="html">Doesn&apos;t return a value (but how could it - the app terminated)</Abstract></ReturnValue>
			<Anchor>//api/name/applicationTerminated</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/handleNotification:forApplicationState:</TokenIdentifier>
			<Abstract type="html">Handles a push notification received by the app when the application is already running.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (void)handleNotification:(NSDictionary *)userInfo forApplicationState:(UIApplicationState)applicationState</Declaration>
			<Parameters>
				<Parameter>
					<Name>userInfo</Name>
					<Abstract type="html">The dictionary containing the push notification</Abstract>
				</Parameter><Parameter>
					<Name>applicationState</Name>
					<Abstract type="html">State of the application at time of notification</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Doesn&apos;t return a value.</Abstract></ReturnValue>
			<Anchor>//api/name/handleNotification:forApplicationState:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/handleLocalNotification:</TokenIdentifier>
			<Abstract type="html">Handles a local notification received by the application.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (void)handleLocalNotification:(UILocalNotification *)notification</Declaration>
			<Parameters>
				<Parameter>
					<Name>notification</Name>
					<Abstract type="html">The received UILocalNotification</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Doesn&apos;t return a value</Abstract></ReturnValue>
			<Anchor>//api/name/handleLocalNotification:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/setSubscriberKey:</TokenIdentifier>
			<Abstract type="html">Accepts and sets the Subscriber Key for the device&apos;s user.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (BOOL)setSubscriberKey:(NSString *)subscriberKey</Declaration>
			<Parameters>
				<Parameter>
					<Name>subscriberKey</Name>
					<Abstract type="html">The subscriber key to attribute to the user.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if set successfully</Abstract></ReturnValue>
			<Anchor>//api/name/setSubscriberKey:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/getSubscriberKey</TokenIdentifier>
			<Abstract type="html">Returns the subscriber key for the active user, in case you need it.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (NSString *)getSubscriberKey</Declaration>
			
			<ReturnValue><Abstract type="html">subscriberKey The code-set subscriber key.</Abstract></ReturnValue>
			<Anchor>//api/name/getSubscriberKey</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/addTag:</TokenIdentifier>
			<Abstract type="html">Adds the provided Tag (NSString) to the set of unique tags.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (BOOL)addTag:(NSString *)tag</Declaration>
			<Parameters>
				<Parameter>
					<Name>tag</Name>
					<Abstract type="html">A string to add to the list of tags</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if added successfully.</Abstract></ReturnValue>
			<Anchor>//api/name/addTag:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/removeTag:</TokenIdentifier>
			<Abstract type="html">Removes the provided Tag (NSString) from the list of tags.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (NSString *)removeTag:(NSString *)tag</Declaration>
			<Parameters>
				<Parameter>
					<Name>tag</Name>
					<Abstract type="html">A string to remove from the list of tags</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">tag Echoes the tag back on successful removal, or nil if something failed.</Abstract></ReturnValue>
			<Anchor>//api/name/removeTag:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/allTags</TokenIdentifier>
			<Abstract type="html">Returns the list of tags for this device. (&lt;b class=&quot;deprecated&quot;&gt;Deprecated:&lt;/b&gt;&lt;span class=&quot;deprecated&quot;&gt; Feb 29 2016&lt;/span&gt;)</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (NSSet *)allTags</Declaration>
			
			<ReturnValue><Abstract type="html">All tags associated.</Abstract></ReturnValue>
			<Anchor>//api/name/allTags</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/getTags</TokenIdentifier>
			<Abstract type="html">Returns the list of tags for this device.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (NSSet *)getTags</Declaration>
			
			<ReturnValue><Abstract type="html">All tags associated.</Abstract></ReturnValue>
			<Anchor>//api/name/getTags</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/addAttributeNamed:value:</TokenIdentifier>
			<Abstract type="html">Adds an attribute to the data set sent to Salesforce.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (BOOL)addAttributeNamed:(NSString *)name value:(NSString *)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of the attribute you wish to send. This will be the key of the pair.</Abstract>
				</Parameter><Parameter>
					<Name>value</Name>
					<Abstract type="html">The value to set for thid data pair.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if added successfully</Abstract></ReturnValue>
			<Anchor>//api/name/addAttributeNamed:value:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/removeAttributeNamed:</TokenIdentifier>
			<Abstract type="html">Removes the provided attribute from the data set to send to Salesforce.  The value is not changed on the SFMC.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (NSString *)removeAttributeNamed:(NSString *)name</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of the attribute you wish to remove.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Returns the value that was set. It will no longer be sent back to Salesforce.</Abstract></ReturnValue>
			<Anchor>//api/name/removeAttributeNamed:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/allAttributes</TokenIdentifier>
			<Abstract type="html">Returns a read-only copy of the Attributes dictionary as it is right now. (&lt;b class=&quot;deprecated&quot;&gt;Deprecated:&lt;/b&gt;&lt;span class=&quot;deprecated&quot;&gt; Feb 29 2016&lt;/span&gt;)</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (NSDictionary *)allAttributes</Declaration>
			
			<ReturnValue><Abstract type="html">All attributes currently set</Abstract></ReturnValue>
			<Anchor>//api/name/allAttributes</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/getAttributes</TokenIdentifier>
			<Abstract type="html">Returns a read-only copy of the Attributes dictionary as it is right now.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (NSDictionary *)getAttributes</Declaration>
			
			<ReturnValue><Abstract type="html">All attributes currently set</Abstract></ReturnValue>
			<Anchor>//api/name/getAttributes</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/startListeningForApplicationNotifications</TokenIdentifier>
			<Abstract type="html">Sets up the listeners.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (void)startListeningForApplicationNotifications</Declaration>
			
			
			<Anchor>//api/name/startListeningForApplicationNotifications</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/stopListeningForApplicationNotifications</TokenIdentifier>
			<Abstract type="html">Drops the listeners.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (void)stopListeningForApplicationNotifications</Declaration>
			
			
			<Anchor>//api/name/stopListeningForApplicationNotifications</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/applicationDidBecomeActiveNotificationReceived</TokenIdentifier>
			<Abstract type="html">Responds to the UIApplicationDidBecomeActiveNotification notification</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (void)applicationDidBecomeActiveNotificationReceived</Declaration>
			
			
			<Anchor>//api/name/applicationDidBecomeActiveNotificationReceived</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/applicationDidEnterBackgroundNotificationReceived</TokenIdentifier>
			<Abstract type="html">Responds to the UIApplicationDidEnterBackgroundNotification notification</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (void)applicationDidEnterBackgroundNotificationReceived</Declaration>
			
			
			<Anchor>//api/name/applicationDidEnterBackgroundNotificationReceived</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ETPush/safeDeviceIdentifier</TokenIdentifier>
			<Abstract type="html">Gets the Apple-safe, unique Device Identifier that ET will later use to identify the device.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>+ (NSString *)safeDeviceIdentifier</Declaration>
			
			
			<Anchor>//api/name/safeDeviceIdentifier</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ETPush/hardwareIdentifier</TokenIdentifier>
			<Abstract type="html">Returns the hardware identification string, like &quot;iPhone1,1&quot;. Salesforce uses this data for segmentation.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>+ (NSString *)hardwareIdentifier</Declaration>
			
			<ReturnValue><Abstract type="html">A string of the hardware identification.</Abstract></ReturnValue>
			<Anchor>//api/name/hardwareIdentifier</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ETPush/isPushEnabled</TokenIdentifier>
			<Abstract type="html">Returns whether this device can receive Push Notifications.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>+ (BOOL)isPushEnabled</Declaration>
			
			
			<Anchor>//api/name/isPushEnabled</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ETPush/getSDKVersionName</TokenIdentifier>
			<Abstract type="html">Get SDK Version Name</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>+ (NSString *)getSDKVersionName</Declaration>
			
			
			<Anchor>//api/name/getSDKVersionName</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ETPush/getSDKVersionCode</TokenIdentifier>
			<Abstract type="html">Get SDK Version Code</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>+ (NSString *)getSDKVersionCode</Declaration>
			
			<ReturnValue><Abstract type="html">NSString value.</Abstract></ReturnValue>
			<Anchor>//api/name/getSDKVersionCode</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ETPush/setETLoggerToRequiredState:</TokenIdentifier>
			<Abstract type="html">Set the Log Level</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>+ (void)setETLoggerToRequiredState:(BOOL)state</Declaration>
			<Parameters>
				<Parameter>
					<Name>state</Name>
					<Abstract type="html">type BOOL value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">nothing to return.</Abstract></ReturnValue>
			<Anchor>//api/name/setETLoggerToRequiredState:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ETPush/setLoggerWithHandler:</TokenIdentifier>
			<Abstract type="html">To override the logging that the SDK does with your own logging code.  Adding this logging handler will
replace the logs that the SDK prints to the console.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>+ (void)setLoggerWithHandler:(void ( ^ ) ( NSString *))customLogger</Declaration>
			<Parameters>
				<Parameter>
					<Name>customLogger</Name>
					<Abstract type="html">- A completion handler that will be called each time the SDK logs to the console.  Instead of
                       calling NSLog to log to the console, the SDK will call this customLogger and provide the String
                       that was going to be logged.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">- No value returned.</Abstract></ReturnValue>
			<Anchor>//api/name/setLoggerWithHandler:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ETPush/getSDKState</TokenIdentifier>
			<Abstract type="html">Outputs a formatted, easily readable block of text describing the current status of the SDK.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>+ (NSString *)getSDKState</Declaration>
			
			<ReturnValue><Abstract type="html">JSON string with values of the current state of the SDK</Abstract></ReturnValue>
			<Anchor>//api/name/getSDKState</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETPush/refreshWithFetchCompletionHandler:</TokenIdentifier>
			<Abstract type="html">Ask ETPush to update its data. ETPush will throttle attempts based on the time since the last time this was called.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>- (BOOL)refreshWithFetchCompletionHandler:(void ( ^ ) ( UIBackgroundFetchResult result ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The UIBackgroundFetchResult completion handler. This method will be called with UIBackgroundFetchResultNoData if no attempt was made to update data, otherwise it will be called with UIBackgroundFetchResultNewData after the update completes. If nil is passed, then process of the completion handler must be managed by the caller.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">True if ETPush did make an attempt at updating data</Abstract></ReturnValue>
			<Anchor>//api/name/refreshWithFetchCompletionHandler:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ETPush/requestPIRecommendations:page:error:completionHandler:</TokenIdentifier>
			<Abstract type="html">Used to retrieve a JSON formatted string of recommendations from the Predictive Web section of the Marketing Cloud.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>+ (BOOL)requestPIRecommendations:(NSString *)mid page:(NSString *)page error:(NSError **)error completionHandler:(void ( ^ ) ( NSString *result , NSError *error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>mid</Name>
					<Abstract type="html">An identifier used to locate the application specific recommendations</Abstract>
				</Parameter><Parameter>
					<Name>page</Name>
					<Abstract type="html">A recommendations page that has been created within the Predictive Web section of the Marketing Cloud</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">A pointer to a location to store an NSError object describing any error that occurred while sanity checking the input parameters. Can be nil.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">A pointer to a user-supplied completion handler block. The completion handler will be called if requestPIRecommendations returns True. The result parameter of the completion handler will contain a JSON formatted string with the recommendations on a successfull call otherwise it will be nil and the error parameter will be filled with an NSError object describing the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Returns T/F based on sanity checks of the input parameters. If False is returned the user completion handler will not be called.</Abstract></ReturnValue>
			<Anchor>//api/name/requestPIRecommendations:page:error:completionHandler:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ETPush/requestPIRecommendations:page:retailer:error:completionHandler:</TokenIdentifier>
			<Abstract type="html">Used to retrieve a JSON formatted string of recommendations from the Predictive Web section of the Marketing Cloud.</Abstract>
			<DeclaredIn>ETPush.h</DeclaredIn>
			
			<Declaration>+ (BOOL)requestPIRecommendations:(NSString *)mid page:(NSString *)page retailer:(NSString *)retailer error:(NSError **)error completionHandler:(void ( ^ ) ( NSString *result , NSError *error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>mid</Name>
					<Abstract type="html">An identifier used to locate the application specific recommendations</Abstract>
				</Parameter><Parameter>
					<Name>page</Name>
					<Abstract type="html">A recommendations page that has been created within the Predictive Web section of the Marketing Cloud</Abstract>
				</Parameter><Parameter>
					<Name>retailer</Name>
					<Abstract type="html">An identifier used to locate the application specific recommendations</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">A pointer to a location to store an NSError object describing any error that occurred while sanity checking the input parameters. Can be nil.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">A pointer to a user-supplied completion handler block. The completion handler will be called if requestPIRecommendations returns True. The result parameter of the completion handler will contain a JSON formatted string with the recommendations on a successfull call otherwise it will be nil and the error parameter will be filled with an NSError object describing the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Returns T/F based on sanity checks of the input parameters. If False is returned the user completion handler will not be called.</Abstract></ReturnValue>
			<Anchor>//api/name/requestPIRecommendations:page:retailer:error:completionHandler:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
        
        
	</File>
</Tokens>