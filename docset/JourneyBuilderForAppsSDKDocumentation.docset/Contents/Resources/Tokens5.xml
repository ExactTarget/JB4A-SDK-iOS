<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/ETMessage.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/ETMessage</TokenIdentifier>
			<Abstract type="html">ETMessage is the local representation of a Message from Salesforce. They are multipurpose, sometimes representing a message that should be scheduled because of the entrance or exit of a Geofence, the proximal arrival to an iBeacon, or a CloudPage message downloaded from ET. Because of their multipurpose nature, there are a lot of different attributes on them, many of which may be null at any give time depending on the type of message.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
            
			
			<NodeRef refid="5"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setMessageIdentifier:</TokenIdentifier>
			<Abstract type="html">Encoded ID from Salesforce. Will match the ID in MobilePush. This is the primary key.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *messageIdentifier</Declaration>
			
			
			<Anchor>//api/name/messageIdentifier</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/messageIdentifier</TokenIdentifier>
			<Abstract type="html">Encoded ID from Salesforce. Will match the ID in MobilePush. This is the primary key.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *messageIdentifier</Declaration>
			
			
			<Anchor>//api/name/messageIdentifier</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/messageIdentifier</TokenIdentifier>
			<Abstract type="html">Encoded ID from Salesforce. Will match the ID in MobilePush. This is the primary key.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *messageIdentifier</Declaration>
			
			
			<Anchor>//api/name/messageIdentifier</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setMessageName:</TokenIdentifier>
			<Abstract type="html">This is the name which is set on SalesforceMarketingCloud, while setting the ETMessage</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *messageName</Declaration>
			
			
			<Anchor>//api/name/messageName</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/messageName</TokenIdentifier>
			<Abstract type="html">This is the name which is set on SalesforceMarketingCloud, while setting the ETMessage</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *messageName</Declaration>
			
			
			<Anchor>//api/name/messageName</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/messageName</TokenIdentifier>
			<Abstract type="html">This is the name which is set on SalesforceMarketingCloud, while setting the ETMessage</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *messageName</Declaration>
			
			
			<Anchor>//api/name/messageName</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setMessageType:</TokenIdentifier>
			<Abstract type="html">The type of ETMessage being represented.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) MobilePushMessageType messageType</Declaration>
			
			
			<Anchor>//api/name/messageType</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/messageType</TokenIdentifier>
			<Abstract type="html">The type of ETMessage being represented.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) MobilePushMessageType messageType</Declaration>
			
			
			<Anchor>//api/name/messageType</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/messageType</TokenIdentifier>
			<Abstract type="html">The type of ETMessage being represented.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) MobilePushMessageType messageType</Declaration>
			
			
			<Anchor>//api/name/messageType</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setContentType:</TokenIdentifier>
			<Abstract type="html">Bitmask of features that this message has on it (CloudPage, Push only)</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) MobilePushContentType contentType</Declaration>
			
			
			<Anchor>//api/name/contentType</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/contentType</TokenIdentifier>
			<Abstract type="html">Bitmask of features that this message has on it (CloudPage, Push only)</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) MobilePushContentType contentType</Declaration>
			
			
			<Anchor>//api/name/contentType</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/contentType</TokenIdentifier>
			<Abstract type="html">Bitmask of features that this message has on it (CloudPage, Push only)</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) MobilePushContentType contentType</Declaration>
			
			
			<Anchor>//api/name/contentType</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setAlert:</TokenIdentifier>
			<Abstract type="html">The alert text of the message. This displays on the screen.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *alert</Declaration>
			
			
			<Anchor>//api/name/alert</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/alert</TokenIdentifier>
			<Abstract type="html">The alert text of the message. This displays on the screen.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *alert</Declaration>
			
			
			<Anchor>//api/name/alert</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/alert</TokenIdentifier>
			<Abstract type="html">The alert text of the message. This displays on the screen.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *alert</Declaration>
			
			
			<Anchor>//api/name/alert</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setSound:</TokenIdentifier>
			<Abstract type="html">The sound that should play, if any. Most of the time, either &quot;default&quot; or &quot;custom.caf&quot;, conventions enforced in MobilePush.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *sound</Declaration>
			
			
			<Anchor>//api/name/sound</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/sound</TokenIdentifier>
			<Abstract type="html">The sound that should play, if any. Most of the time, either &quot;default&quot; or &quot;custom.caf&quot;, conventions enforced in MobilePush.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *sound</Declaration>
			
			
			<Anchor>//api/name/sound</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/sound</TokenIdentifier>
			<Abstract type="html">The sound that should play, if any. Most of the time, either &quot;default&quot; or &quot;custom.caf&quot;, conventions enforced in MobilePush.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *sound</Declaration>
			
			
			<Anchor>//api/name/sound</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setBadge:</TokenIdentifier>
			<Abstract type="html">The badge modifier. This should be a NSString in the form of &quot;+1&quot; or nothing at all. It&apos;s saved as a string because of that.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *badge</Declaration>
			
			
			<Anchor>//api/name/badge</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/badge</TokenIdentifier>
			<Abstract type="html">The badge modifier. This should be a NSString in the form of &quot;+1&quot; or nothing at all. It&apos;s saved as a string because of that.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *badge</Declaration>
			
			
			<Anchor>//api/name/badge</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/badge</TokenIdentifier>
			<Abstract type="html">The badge modifier. This should be a NSString in the form of &quot;+1&quot; or nothing at all. It&apos;s saved as a string because of that.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *badge</Declaration>
			
			
			<Anchor>//api/name/badge</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setCategory:</TokenIdentifier>
			<Abstract type="html">The category name for an interactive notification if it has one.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *category</Declaration>
			
			
			<Anchor>//api/name/category</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/category</TokenIdentifier>
			<Abstract type="html">The category name for an interactive notification if it has one.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *category</Declaration>
			
			
			<Anchor>//api/name/category</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/category</TokenIdentifier>
			<Abstract type="html">The category name for an interactive notification if it has one.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *category</Declaration>
			
			
			<Anchor>//api/name/category</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setKeyValuePairs:</TokenIdentifier>
			<Abstract type="html">An array of Key Value Pairs, or Custom Keys in local parlance, for this message. This will contain NSDictionary objects.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSArray *keyValuePairs</Declaration>
			
			
			<Anchor>//api/name/keyValuePairs</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/keyValuePairs</TokenIdentifier>
			<Abstract type="html">An array of Key Value Pairs, or Custom Keys in local parlance, for this message. This will contain NSDictionary objects.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSArray *keyValuePairs</Declaration>
			
			
			<Anchor>//api/name/keyValuePairs</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/keyValuePairs</TokenIdentifier>
			<Abstract type="html">An array of Key Value Pairs, or Custom Keys in local parlance, for this message. This will contain NSDictionary objects.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSArray *keyValuePairs</Declaration>
			
			
			<Anchor>//api/name/keyValuePairs</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setStartDate:</TokenIdentifier>
			<Abstract type="html">The message&apos;s start date. Messages shouldn&apos;t show before this time.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSDate *startDate</Declaration>
			
			
			<Anchor>//api/name/startDate</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/startDate</TokenIdentifier>
			<Abstract type="html">The message&apos;s start date. Messages shouldn&apos;t show before this time.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSDate *startDate</Declaration>
			
			
			<Anchor>//api/name/startDate</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/startDate</TokenIdentifier>
			<Abstract type="html">The message&apos;s start date. Messages shouldn&apos;t show before this time.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSDate *startDate</Declaration>
			
			
			<Anchor>//api/name/startDate</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setEndDate:</TokenIdentifier>
			<Abstract type="html">The message&apos;s end date. Messages shouldn&apos;t show after this time.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSDate *endDate</Declaration>
			
			
			<Anchor>//api/name/endDate</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/endDate</TokenIdentifier>
			<Abstract type="html">The message&apos;s end date. Messages shouldn&apos;t show after this time.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSDate *endDate</Declaration>
			
			
			<Anchor>//api/name/endDate</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/endDate</TokenIdentifier>
			<Abstract type="html">The message&apos;s end date. Messages shouldn&apos;t show after this time.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSDate *endDate</Declaration>
			
			
			<Anchor>//api/name/endDate</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setSiteIdentifier:</TokenIdentifier>
			<Abstract type="html">The Site ID for the CloudPage attached to this message.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *siteIdentifier</Declaration>
			
			
			<Anchor>//api/name/siteIdentifier</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/siteIdentifier</TokenIdentifier>
			<Abstract type="html">The Site ID for the CloudPage attached to this message.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *siteIdentifier</Declaration>
			
			
			<Anchor>//api/name/siteIdentifier</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/siteIdentifier</TokenIdentifier>
			<Abstract type="html">The Site ID for the CloudPage attached to this message.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *siteIdentifier</Declaration>
			
			
			<Anchor>//api/name/siteIdentifier</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setSiteUrlAsString:</TokenIdentifier>
			<Abstract type="html">The Site URL for the ClouePage attached to this message. It is saved as an NSString and converted later to NSURL.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *siteUrlAsString</Declaration>
			
			
			<Anchor>//api/name/siteUrlAsString</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/siteUrlAsString</TokenIdentifier>
			<Abstract type="html">The Site URL for the ClouePage attached to this message. It is saved as an NSString and converted later to NSURL.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *siteUrlAsString</Declaration>
			
			
			<Anchor>//api/name/siteUrlAsString</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/siteUrlAsString</TokenIdentifier>
			<Abstract type="html">The Site URL for the ClouePage attached to this message. It is saved as an NSString and converted later to NSURL.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *siteUrlAsString</Declaration>
			
			
			<Anchor>//api/name/siteUrlAsString</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setOpenDirectPayload:</TokenIdentifier>
			<Abstract type="html">OpenDirect payload for this message, if there is one.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *openDirectPayload</Declaration>
			
			
			<Anchor>//api/name/openDirectPayload</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/openDirectPayload</TokenIdentifier>
			<Abstract type="html">OpenDirect payload for this message, if there is one.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *openDirectPayload</Declaration>
			
			
			<Anchor>//api/name/openDirectPayload</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/openDirectPayload</TokenIdentifier>
			<Abstract type="html">OpenDirect payload for this message, if there is one.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *openDirectPayload</Declaration>
			
			
			<Anchor>//api/name/openDirectPayload</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setRelatedFence:</TokenIdentifier>
			<Abstract type="html">DEPRECTED. The related ETRegion for this message. This is a remnant of days when the relationship was one to one. It is not anymore.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) ETRegion *relatedFence</Declaration>
			
			
			<Anchor>//api/name/relatedFence</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/relatedFence</TokenIdentifier>
			<Abstract type="html">DEPRECTED. The related ETRegion for this message. This is a remnant of days when the relationship was one to one. It is not anymore.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) ETRegion *relatedFence</Declaration>
			
			
			<Anchor>//api/name/relatedFence</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/relatedFence</TokenIdentifier>
			<Abstract type="html">DEPRECTED. The related ETRegion for this message. This is a remnant of days when the relationship was one to one. It is not anymore.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) ETRegion *relatedFence</Declaration>
			
			
			<Anchor>//api/name/relatedFence</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setMessageLimit:</TokenIdentifier>
			<Abstract type="html">The total number of times, ever, that a message will show on a device.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSNumber *messageLimit</Declaration>
			
			
			<Anchor>//api/name/messageLimit</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/messageLimit</TokenIdentifier>
			<Abstract type="html">The total number of times, ever, that a message will show on a device.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSNumber *messageLimit</Declaration>
			
			
			<Anchor>//api/name/messageLimit</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/messageLimit</TokenIdentifier>
			<Abstract type="html">The total number of times, ever, that a message will show on a device.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSNumber *messageLimit</Declaration>
			
			
			<Anchor>//api/name/messageLimit</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setMessagesPerPeriod:</TokenIdentifier>
			<Abstract type="html">The total number of times for a given number of time units that a message can be shown. In the statement &quot;show 1 time per 2 hours&quot;, this is the &quot;1&quot; part.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSNumber *messagesPerPeriod</Declaration>
			
			
			<Anchor>//api/name/messagesPerPeriod</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/messagesPerPeriod</TokenIdentifier>
			<Abstract type="html">The total number of times for a given number of time units that a message can be shown. In the statement &quot;show 1 time per 2 hours&quot;, this is the &quot;1&quot; part.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSNumber *messagesPerPeriod</Declaration>
			
			
			<Anchor>//api/name/messagesPerPeriod</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/messagesPerPeriod</TokenIdentifier>
			<Abstract type="html">The total number of times for a given number of time units that a message can be shown. In the statement &quot;show 1 time per 2 hours&quot;, this is the &quot;1&quot; part.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSNumber *messagesPerPeriod</Declaration>
			
			
			<Anchor>//api/name/messagesPerPeriod</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setNumberOfPeriods:</TokenIdentifier>
			<Abstract type="html">The number of time periods in which a message should be limited. In the statement &quot;show 1 time per 2 hours&quot;, this is the &quot;2&quot; part.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSNumber *numberOfPeriods</Declaration>
			
			
			<Anchor>//api/name/numberOfPeriods</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/numberOfPeriods</TokenIdentifier>
			<Abstract type="html">The number of time periods in which a message should be limited. In the statement &quot;show 1 time per 2 hours&quot;, this is the &quot;2&quot; part.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSNumber *numberOfPeriods</Declaration>
			
			
			<Anchor>//api/name/numberOfPeriods</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/numberOfPeriods</TokenIdentifier>
			<Abstract type="html">The number of time periods in which a message should be limited. In the statement &quot;show 1 time per 2 hours&quot;, this is the &quot;2&quot; part.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSNumber *numberOfPeriods</Declaration>
			
			
			<Anchor>//api/name/numberOfPeriods</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setPeriodType:</TokenIdentifier>
			<Abstract type="html">The time unit counted in numberOfPeriods. In the statement &quot;show 1 time per 2 hours&quot;, this is the &quot;hours&quot; part.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) MobilePushMessageFrequencyUnit periodType</Declaration>
			
			
			<Anchor>//api/name/periodType</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/periodType</TokenIdentifier>
			<Abstract type="html">The time unit counted in numberOfPeriods. In the statement &quot;show 1 time per 2 hours&quot;, this is the &quot;hours&quot; part.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) MobilePushMessageFrequencyUnit periodType</Declaration>
			
			
			<Anchor>//api/name/periodType</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/periodType</TokenIdentifier>
			<Abstract type="html">The time unit counted in numberOfPeriods. In the statement &quot;show 1 time per 2 hours&quot;, this is the &quot;hours&quot; part.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) MobilePushMessageFrequencyUnit periodType</Declaration>
			
			
			<Anchor>//api/name/periodType</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setRollingPeriod:</TokenIdentifier>
			<Abstract type="html">Whether or not the period is a rolling period. Defaults to YES through code.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isRollingPeriod) BOOL rollingPeriod</Declaration>
			
			
			<Anchor>//api/name/rollingPeriod</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/isRollingPeriod</TokenIdentifier>
			<Abstract type="html">Whether or not the period is a rolling period. Defaults to YES through code.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isRollingPeriod) BOOL rollingPeriod</Declaration>
			
			
			<Anchor>//api/name/rollingPeriod</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/rollingPeriod</TokenIdentifier>
			<Abstract type="html">Whether or not the period is a rolling period. Defaults to YES through code.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isRollingPeriod) BOOL rollingPeriod</Declaration>
			
			
			<Anchor>//api/name/rollingPeriod</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setMinTripped:</TokenIdentifier>
			<Abstract type="html">The number of times an ETRegion must be tripped before the message shows. This is not currently used, and is a placeholder for future functionality.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSNumber *minTripped</Declaration>
			
			
			<Anchor>//api/name/minTripped</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/minTripped</TokenIdentifier>
			<Abstract type="html">The number of times an ETRegion must be tripped before the message shows. This is not currently used, and is a placeholder for future functionality.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSNumber *minTripped</Declaration>
			
			
			<Anchor>//api/name/minTripped</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/minTripped</TokenIdentifier>
			<Abstract type="html">The number of times an ETRegion must be tripped before the message shows. This is not currently used, and is a placeholder for future functionality.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSNumber *minTripped</Declaration>
			
			
			<Anchor>//api/name/minTripped</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setEphemeralMessage:</TokenIdentifier>
			<Abstract type="html">Ephemeral Messages disappear when the user walks away from the iBeacon that tripped the message. The default value is NO.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isEphemeralMessage) BOOL ephemeralMessage</Declaration>
			
			
			<Anchor>//api/name/ephemeralMessage</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/isEphemeralMessage</TokenIdentifier>
			<Abstract type="html">Ephemeral Messages disappear when the user walks away from the iBeacon that tripped the message. The default value is NO.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isEphemeralMessage) BOOL ephemeralMessage</Declaration>
			
			
			<Anchor>//api/name/ephemeralMessage</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/ephemeralMessage</TokenIdentifier>
			<Abstract type="html">Ephemeral Messages disappear when the user walks away from the iBeacon that tripped the message. The default value is NO.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isEphemeralMessage) BOOL ephemeralMessage</Declaration>
			
			
			<Anchor>//api/name/ephemeralMessage</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setProximity:</TokenIdentifier>
			<Abstract type="html">For iBeacon messages, the proximity the user must arrive in before the message is fired. It is treated as a &quot;less than&quot; value, meaning if the message is set to Far, the message can be shown in Far, Near or Immediate.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CLProximity proximity</Declaration>
			
			
			<Anchor>//api/name/proximity</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/proximity</TokenIdentifier>
			<Abstract type="html">For iBeacon messages, the proximity the user must arrive in before the message is fired. It is treated as a &quot;less than&quot; value, meaning if the message is set to Far, the message can be shown in Far, Near or Immediate.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CLProximity proximity</Declaration>
			
			
			<Anchor>//api/name/proximity</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/proximity</TokenIdentifier>
			<Abstract type="html">For iBeacon messages, the proximity the user must arrive in before the message is fired. It is treated as a &quot;less than&quot; value, meaning if the message is set to Far, the message can be shown in Far, Near or Immediate.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CLProximity proximity</Declaration>
			
			
			<Anchor>//api/name/proximity</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setLoiteringSeconds:</TokenIdentifier>
			<Abstract type="html">The number of seconds the user must stand near an iBeacon before the message is displayed. This is treated as an offset in scheduling the UILocalNotification, which will be cancelled if the user walks away too early.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSInteger loiteringSeconds</Declaration>
			
			
			<Anchor>//api/name/loiteringSeconds</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/loiteringSeconds</TokenIdentifier>
			<Abstract type="html">The number of seconds the user must stand near an iBeacon before the message is displayed. This is treated as an offset in scheduling the UILocalNotification, which will be cancelled if the user walks away too early.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSInteger loiteringSeconds</Declaration>
			
			
			<Anchor>//api/name/loiteringSeconds</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/loiteringSeconds</TokenIdentifier>
			<Abstract type="html">The number of seconds the user must stand near an iBeacon before the message is displayed. This is treated as an offset in scheduling the UILocalNotification, which will be cancelled if the user walks away too early.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSInteger loiteringSeconds</Declaration>
			
			
			<Anchor>//api/name/loiteringSeconds</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setRead:</TokenIdentifier>
			<Abstract type="html">Whether or not the message has been read. This must be set through markAsRead by the developer.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, getter=isRead, readonly) BOOL read</Declaration>
			
			
			<Anchor>//api/name/read</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/isRead</TokenIdentifier>
			<Abstract type="html">Whether or not the message has been read. This must be set through markAsRead by the developer.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, getter=isRead, readonly) BOOL read</Declaration>
			
			
			<Anchor>//api/name/read</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/read</TokenIdentifier>
			<Abstract type="html">Whether or not the message has been read. This must be set through markAsRead by the developer.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, getter=isRead, readonly) BOOL read</Declaration>
			
			
			<Anchor>//api/name/read</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setActive:</TokenIdentifier>
			<Abstract type="html">Whether or not the message is active in the local database.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, getter=isActive, readonly) BOOL active</Declaration>
			
			
			<Anchor>//api/name/active</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/isActive</TokenIdentifier>
			<Abstract type="html">Whether or not the message is active in the local database.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, getter=isActive, readonly) BOOL active</Declaration>
			
			
			<Anchor>//api/name/active</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/active</TokenIdentifier>
			<Abstract type="html">Whether or not the message is active in the local database.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, getter=isActive, readonly) BOOL active</Declaration>
			
			
			<Anchor>//api/name/active</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setNotification:</TokenIdentifier>
			<Abstract type="html">A reference to the UILocalNotification triggered for this message. It is used later to cancel the message if need be.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) UILocalNotification *notification</Declaration>
			
			
			<Anchor>//api/name/notification</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/notification</TokenIdentifier>
			<Abstract type="html">A reference to the UILocalNotification triggered for this message. It is used later to cancel the message if need be.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) UILocalNotification *notification</Declaration>
			
			
			<Anchor>//api/name/notification</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/notification</TokenIdentifier>
			<Abstract type="html">A reference to the UILocalNotification triggered for this message. It is used later to cancel the message if need be.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) UILocalNotification *notification</Declaration>
			
			
			<Anchor>//api/name/notification</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/setHasShownForBeacon:</TokenIdentifier>
			<Abstract type="html">Used while ranging beacons to determine if a message for a beacon has been shown based on the proximity trigger.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) BOOL hasShownForBeacon</Declaration>
			
			
			<Anchor>//api/name/hasShownForBeacon</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/hasShownForBeacon</TokenIdentifier>
			<Abstract type="html">Used while ranging beacons to determine if a message for a beacon has been shown based on the proximity trigger.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) BOOL hasShownForBeacon</Declaration>
			
			
			<Anchor>//api/name/hasShownForBeacon</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ETMessage/hasShownForBeacon</TokenIdentifier>
			<Abstract type="html">Used while ranging beacons to determine if a message for a beacon has been shown based on the proximity trigger.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) BOOL hasShownForBeacon</Declaration>
			
			
			<Anchor>//api/name/hasShownForBeacon</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/initFromDictionary:</TokenIdentifier>
			<Abstract type="html">Creates a new ETMessage with values in the given NSDictionary.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>- (instancetype)initFromDictionary:(NSDictionary *)dict</Declaration>
			<Parameters>
				<Parameter>
					<Name>dict</Name>
					<Abstract type="html">A dictionary of values to apply to the ETMessage</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new ETMessage</Abstract></ReturnValue>
			<Anchor>//api/name/initFromDictionary:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/initFromDictionary:forFence:</TokenIdentifier>
			<Abstract type="html">Designated Initializer. Creates a new ETMessage with values from an NSDictionary for a specific ETRegion.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>- (instancetype)initFromDictionary:(NSDictionary *)dict forFence:(ETRegion *)region</Declaration>
			<Parameters>
				<Parameter>
					<Name>dict</Name>
					<Abstract type="html">A dictionary of values to apply to the ETMessage</Abstract>
				</Parameter><Parameter>
					<Name>region</Name>
					<Abstract type="html">The ETRegion that prompted the creation of this ETMessage</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new ETMessage</Abstract></ReturnValue>
			<Anchor>//api/name/initFromDictionary:forFence:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/subject</TokenIdentifier>
			<Abstract type="html">This is an overridden accessor for subj ect to handle some business logic around what to show. Use this for display in an inbox.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>- (NSString *)subject</Declaration>
			
			
			<Anchor>//api/name/subject</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/siteURL</TokenIdentifier>
			<Abstract type="html">Cleanses and returns the Sites URL as a proper NSURL. This is mostly for convenience.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>- (NSURL *)siteURL</Declaration>
			
			
			<Anchor>//api/name/siteURL</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/markAsRead</TokenIdentifier>
			<Abstract type="html">Marks a message as read in the local cache. Read messages do not show up in the Inbox.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>- (BOOL)markAsRead</Declaration>
			
			
			<Anchor>//api/name/markAsRead</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/messageScheduledForDisplay</TokenIdentifier>
			<Abstract type="html">Records a message as scheduled, and updates the fun, fun logic around when it should again, if it should of course.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>- (BOOL)messageScheduledForDisplay</Declaration>
			
			
			<Anchor>//api/name/messageScheduledForDisplay</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/markAsUnread</TokenIdentifier>
			<Abstract type="html">Marks a message as unread. Just for convenience.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>- (BOOL)markAsUnread</Declaration>
			
			
			<Anchor>//api/name/markAsUnread</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/markAsDeleted</TokenIdentifier>
			<Abstract type="html">Marks a message as deleted. They will not be returned after this, and it&apos;s irreversable.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>- (BOOL)markAsDeleted</Declaration>
			
			
			<Anchor>//api/name/markAsDeleted</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/getLastShownDate</TokenIdentifier>
			<Abstract type="html">Getter for a private value, lastShownDate.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>- (NSDate *)getLastShownDate</Declaration>
			
			<ReturnValue><Abstract type="html">The Last Shown Date, if any.</Abstract></ReturnValue>
			<Anchor>//api/name/getLastShownDate</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/getShowCount</TokenIdentifier>
			<Abstract type="html">Getter for a private value, showCount.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>- (int)getShowCount</Declaration>
			
			<ReturnValue><Abstract type="html">The show count for this message.</Abstract></ReturnValue>
			<Anchor>//api/name/getShowCount</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ETMessage/getMessagesByContentType:</TokenIdentifier>
			<Abstract type="html">Gets all active messages for a specific contentType, usually Cloud Pages.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>+ (NSArray *)getMessagesByContentType:(MobilePushContentType)contentType</Declaration>
			<Parameters>
				<Parameter>
					<Name>contentType</Name>
					<Abstract type="html">a MobilePushContentType value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">NSArray value. An NSArray of ETMessages</Abstract></ReturnValue>
			<Anchor>//api/name/getMessagesByContentType:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ETMessage/getMessageByIdentifier:</TokenIdentifier>
			<Abstract type="html">Gets a specific ETMessage for a given identifer.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>+ (ETMessage *)getMessageByIdentifier:(NSString *)identifier</Declaration>
			<Parameters>
				<Parameter>
					<Name>identifier</Name>
					<Abstract type="html">a NSString value. The Message ID to retrieve</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The ETMessage, or nil if not found in the database.</Abstract></ReturnValue>
			<Anchor>//api/name/getMessageByIdentifier:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ETMessage/getMessagesByType:</TokenIdentifier>
			<Abstract type="html">Gets all active ETMessages for a specific message type, like Fence Entry, Exit or Proximity.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>+ (NSArray *)getMessagesByType:(MobilePushMessageType)type</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">The MobilePushMessageType you&apos;d like back</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array of ETMessages.</Abstract></ReturnValue>
			<Anchor>//api/name/getMessagesByType:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ETMessage/getMessagesForGeofence:</TokenIdentifier>
			<Abstract type="html">Gets all active ETMessages tied to a specific ETRegion (Geofence).</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>+ (NSArray *)getMessagesForGeofence:(ETRegion *)fence</Declaration>
			<Parameters>
				<Parameter>
					<Name>fence</Name>
					<Abstract type="html">The ETRegion for which you would like messages</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSArray of ETMessages</Abstract></ReturnValue>
			<Anchor>//api/name/getMessagesForGeofence:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ETMessage/getMessagesForGeofence:andMessageType:</TokenIdentifier>
			<Abstract type="html">Gets all active ETMessages tied to a specific ETRegion (Geofence) and MobilePushMessageType, like Entry ot Exit.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>+ (NSArray *)getMessagesForGeofence:(ETRegion *)fence andMessageType:(MobilePushMessageType)type</Declaration>
			<Parameters>
				<Parameter>
					<Name>fence</Name>
					<Abstract type="html">The ETRegion for which you would like messages</Abstract>
				</Parameter><Parameter>
					<Name>type</Name>
					<Abstract type="html">The MobilePushMessageType that describes the messages you want</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSArray of ETMessages that meet the criteria asked for.</Abstract></ReturnValue>
			<Anchor>//api/name/getMessagesForGeofence:andMessageType:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ETMessage/getProximityMessagesForRegion:</TokenIdentifier>
			<Abstract type="html">Gets all active ETMessages for a specific ETRegion (Proximity).</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>+ (NSArray *)getProximityMessagesForRegion:(ETRegion *)region</Declaration>
			<Parameters>
				<Parameter>
					<Name>region</Name>
					<Abstract type="html">The ETRegion for which you would like messages</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSArray of ETMessages</Abstract></ReturnValue>
			<Anchor>//api/name/getProximityMessagesForRegion:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ETMessage/getMessagesFromExactTargetOfMessageType:andContentType:</TokenIdentifier>
			<Abstract type="html">Triggeres a data pull from Salesforce for messages that meet the supplied requirements.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>+ (void)getMessagesFromExactTargetOfMessageType:(MobilePushMessageType)messageType andContentType:(MobilePushContentType)contentType</Declaration>
			<Parameters>
				<Parameter>
					<Name>messageType</Name>
					<Abstract type="html">The Message Type you wish to retrieve</Abstract>
				</Parameter><Parameter>
					<Name>contentType</Name>
					<Abstract type="html">The Content Type you wish to retrieve</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Doesn&apos;t return a value, but has delegate callbacks.</Abstract></ReturnValue>
			<Anchor>//api/name/getMessagesFromExactTargetOfMessageType:andContentType:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ETMessage/invalidateAllMessagesForType:</TokenIdentifier>
			<Abstract type="html">Marks all messages for a given type as inactive. This is done prior to processing new messages just received from Salesforce.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>+ (BOOL)invalidateAllMessagesForType:(MobilePushMessageType)type</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">The MobilePushMessageType you wish to invalidate</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">T/F if the invalidation query worked</Abstract></ReturnValue>
			<Anchor>//api/name/invalidateAllMessagesForType:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ETMessage/invalidateAllMessagesForContentType:</TokenIdentifier>
			<Abstract type="html">Marks all messages for a given content type as inactive. This is done prior to processing new messages just received from Salesforce.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>+ (BOOL)invalidateAllMessagesForContentType:(MobilePushContentType)type</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">The MobilePushContentType you wish to invalidate</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">T/F if the invalidation query worked</Abstract></ReturnValue>
			<Anchor>//api/name/invalidateAllMessagesForContentType:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETMessage/isEqualToMessage:</TokenIdentifier>
			<Abstract type="html">ETMessage equality. Since object equality won&apos;t always work, this compares messageIdentifiers to determine equality.</Abstract>
			<DeclaredIn>ETMessage.h</DeclaredIn>
			
			<Declaration>- (BOOL)isEqualToMessage:(ETMessage *)message</Declaration>
			<Parameters>
				<Parameter>
					<Name>message</Name>
					<Abstract type="html">The ETMessage to compare self to</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">T/F if the messages are equal.</Abstract></ReturnValue>
			<Anchor>//api/name/isEqualToMessage:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
        
        
	</File>
</Tokens>