<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/ETGenericUpdate.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/ETGenericUpdate</TokenIdentifier>
			<Abstract type="html">@class ETGenericUpdate</Abstract>
			<DeclaredIn>ETGenericUpdate.h</DeclaredIn>
            
			
			<NodeRef refid="2"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETGenericUpdate/sendMethod</TokenIdentifier>
			<Abstract type="html">The HTTP method that should be used for this call.</Abstract>
			<DeclaredIn>ETGenericUpdate.h</DeclaredIn>
			
			<Declaration>- (GenericUpdateSendMethod)sendMethod</Declaration>
			
			
			<Anchor>//api/name/sendMethod</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETGenericUpdate/remoteRoutePath</TokenIdentifier>
			<Abstract type="html">The route to which the call should be made. This will be appended to the BaseURL in ETPhoneHome, and should lead with a slash.</Abstract>
			<DeclaredIn>ETGenericUpdate.h</DeclaredIn>
			
			<Declaration>- (NSString *)remoteRoutePath</Declaration>
			
			
			<Anchor>//api/name/remoteRoutePath</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETGenericUpdate/jsonPayloadAsString</TokenIdentifier>
			<Abstract type="html">Serializes the payload for POSTing.</Abstract>
			<DeclaredIn>ETGenericUpdate.h</DeclaredIn>
			
			<Declaration>- (NSString *)jsonPayloadAsString</Declaration>
			
			
			<Anchor>//api/name/jsonPayloadAsString</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETGenericUpdate/jsonPayloadAsDictionary</TokenIdentifier>
			<Abstract type="html">Serializes as a dictionary for bulk uploading.</Abstract>
			<DeclaredIn>ETGenericUpdate.h</DeclaredIn>
			
			<Declaration>- (NSDictionary *)jsonPayloadAsDictionary</Declaration>
			
			
			<Anchor>//api/name/jsonPayloadAsDictionary</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETGenericUpdate/processResults</TokenIdentifier>
			<Abstract type="html">Called by ETPhoneHome after the ETURLConnection is finished. This should handle doing anything that needs to be done to the payload after it&apos;s fully received (like, start monitoring for geofences.</Abstract>
			<DeclaredIn>ETGenericUpdate.h</DeclaredIn>
			
			<Declaration>- (void)processResults</Declaration>
			
			
			<Anchor>//api/name/processResults</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETGenericUpdate/handleDataFailure</TokenIdentifier>
			<Abstract type="html">Called by ETPhone if the ETURLConnection fails. This should do it&apos;s best to recover what it can, maybe loading things from the database or whatever.</Abstract>
			<DeclaredIn>ETGenericUpdate.h</DeclaredIn>
			
			<Declaration>- (void)handleDataFailure</Declaration>
			
			
			<Anchor>//api/name/handleDataFailure</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETGenericUpdate/shouldSaveSelfToDatabase</TokenIdentifier>
			<Abstract type="html">Not everything should save itself to the database. By default, they should, since that&apos;s the expectation that&apos;s already set. However, sometimes, it doesn&apos;t make sense. This controls that.</Abstract>
			<DeclaredIn>ETGenericUpdate.h</DeclaredIn>
			
			<Declaration>- (BOOL)shouldSaveSelfToDatabase</Declaration>
			
			
			<Anchor>//api/name/shouldSaveSelfToDatabase</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETGenericUpdate/dbVersionNumber</TokenIdentifier>
			<Abstract type="html">To make the databases self-updating (more or less), we keep track of the version of the local DB that the insert query represents. This number is stored to NSUserDefaults with the key in databaseVersionKey and checked before inserts. If the number returned is less than this number, it drops and recreates the database table.</Abstract>
			<DeclaredIn>ETGenericUpdate.h</DeclaredIn>
			
			<Declaration>- (int)dbVersionNumber</Declaration>
			
			
			<Anchor>//api/name/dbVersionNumber</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETGenericUpdate/databaseVersionKey</TokenIdentifier>
			<Abstract type="html">And this is the key to match the dbVersionNumber. It is saved to NSUserDefaults in combination with dbVersionNumber to identify the age of the table.</Abstract>
			<DeclaredIn>ETGenericUpdate.h</DeclaredIn>
			
			<Declaration>- (NSString *)databaseVersionKey</Declaration>
			
			
			<Anchor>//api/name/databaseVersionKey</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETGenericUpdate/generatePersistentDataSchemaInDatabase</TokenIdentifier>
			<Abstract type="html">Passes a call to the Static method of the same name, with the correct object named in the instance variable. It needed an instance counterpart because we are dealing with a specific update at the point where this is called, and that&apos;s the perfect place to reference back to the static version.</Abstract>
			<DeclaredIn>ETGenericUpdate.h</DeclaredIn>
			
			<Declaration>- (BOOL)generatePersistentDataSchemaInDatabase</Declaration>
			
			
			<Anchor>//api/name/generatePersistentDataSchemaInDatabase</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETGenericUpdate/insertQueryArguments</TokenIdentifier>
			<Abstract type="html">Returns the arguments that should be inserted into the database to match the query specified in the previous method. As such, the number should equal the number of question marks used in the previous method.</Abstract>
			<DeclaredIn>ETGenericUpdate.h</DeclaredIn>
			
			<Declaration>- (NSArray *)insertQueryArguments</Declaration>
			
			
			<Anchor>//api/name/insertQueryArguments</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETGenericUpdate/insertQuerySyntax</TokenIdentifier>
			<Abstract type="html">Returns the SQL string that should execute on insert. It should be ready to be prepared and bound via SQLite, so use placeholders where appropriate.</Abstract>
			<DeclaredIn>ETGenericUpdate.h</DeclaredIn>
			
			<Declaration>- (NSString *)insertQuerySyntax</Declaration>
			
			
			<Anchor>//api/name/insertQuerySyntax</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ETGenericUpdate/tableName</TokenIdentifier>
			<Abstract type="html">Returns the name of the table the object should save to. Since this comes in static and instance varieties (sorry), it should return a constant or static string from the object itself.</Abstract>
			<DeclaredIn>ETGenericUpdate.h</DeclaredIn>
			
			<Declaration>- (NSString *)tableName</Declaration>
			
			
			<Anchor>//api/name/tableName</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ETGenericUpdate/formatterOfCorrectFormat</TokenIdentifier>
			<Abstract type="html">Statics</Abstract>
			<DeclaredIn>ETGenericUpdate.h</DeclaredIn>
			
			<Declaration>+ (NSDateFormatter *)formatterOfCorrectFormat</Declaration>
			
			
			<Anchor>//api/name/formatterOfCorrectFormat</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
        
        
	</File>
</Tokens>